name: Comprehensive Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1' # Run every Monday at 2 AM

jobs:
  test-matrix:
    name: Test Matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
        test-type: [unit, backend, e2e]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        
    - name: Run Unit Tests
      if: matrix.test-type == 'unit'
      run: |
        npm run test:run
        npm run test:coverage
        
    - name: Run Backend Tests
      if: matrix.test-type == 'backend'
      run: |
        npm run test:backend
        npm run test:backend:coverage
        
    - name: Install Playwright Browsers
      if: matrix.test-type == 'e2e'
      run: npx playwright install --with-deps
      
    - name: Run E2E Tests
      if: matrix.test-type == 'e2e'
      run: npm run test:e2e
      
    - name: Upload Unit Test Results
      if: matrix.test-type == 'unit'
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-results-${{ matrix.node-version }}
        path: |
          test-results/
          coverage/
          
    - name: Upload Backend Test Results
      if: matrix.test-type == 'backend'
      uses: actions/upload-artifact@v4
      with:
        name: backend-test-results-${{ matrix.node-version }}
        path: |
          backend/coverage/
          backend/test-results/
          
    - name: Upload E2E Test Results
      if: matrix.test-type == 'e2e'
      uses: actions/upload-artifact@v4
      with:
        name: e2e-test-results-${{ matrix.node-version }}
        path: |
          test-results/
          playwright-report/

  comprehensive-test:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    needs: test-matrix
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
      
    - name: Run Comprehensive Test Suite
      run: npm run test:comprehensive
      
    - name: Upload Comprehensive Report
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-test-report
        path: test-results/
        
    - name: Comment PR with Test Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const reportPath = path.join('test-results', 'comprehensive-report.json');
            if (fs.existsSync(reportPath)) {
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              
              const comment = `## 🧪 Test Results
              
              **Summary:**
              - ✅ Passed: ${report.summary.passed}
              - ❌ Failed: ${report.summary.failed}
              - ⏱️ Total Duration: ${(report.summary.totalDuration / 1000).toFixed(2)}s
              
              ${report.coverage ? `**Coverage:**
              - Lines: ${report.coverage.lines.percentage.toFixed(1)}%
              - Functions: ${report.coverage.functions.percentage.toFixed(1)}%
              - Branches: ${report.coverage.branches.percentage.toFixed(1)}%` : ''}
              
              ${report.recommendations.length > 0 ? `**Recommendations:**
              ${report.recommendations.map(rec => `- ${rec}`).join('\n')}` : ''}
              
              [View detailed report](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Could not create PR comment:', error.message);
          }

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        
    - name: Run Performance Tests
      run: npm run test:performance
      
    - name: Upload Performance Results
      uses: actions/upload-artifact@v4
      with:
        name: performance-test-results
        path: test-results/

  security-test:
    name: Security Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run Security Audit
      run: npm audit --audit-level moderate
      
    - name: Run Dependency Check
      run: npx audit-ci --config audit-ci.json || true
      
    - name: Check for Known Vulnerabilities
      run: npx snyk test || true

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-matrix, comprehensive-test]
    if: always()
    
    steps:
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      
    - name: Generate Test Summary
      run: |
        echo "# Test Summary" > test-summary.md
        echo "" >> test-summary.md
        echo "## Results" >> test-summary.md
        echo "" >> test-summary.md
        
        # Check if comprehensive report exists
        if [ -f "comprehensive-test-report/comprehensive-report.json" ]; then
          echo "✅ Comprehensive test suite completed" >> test-summary.md
        else
          echo "❌ Comprehensive test suite failed" >> test-summary.md
        fi
        
        echo "" >> test-summary.md
        echo "## Artifacts" >> test-summary.md
        echo "" >> test-summary.md
        echo "- Unit test results" >> test-summary.md
        echo "- Backend test results" >> test-summary.md
        echo "- E2E test results" >> test-summary.md
        echo "- Comprehensive test report" >> test-summary.md
        
    - name: Upload Test Summary
      uses: actions/upload-artifact@v4
      with:
        name: test-summary
        path: test-summary.md